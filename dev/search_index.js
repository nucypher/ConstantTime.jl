var documenterSearchIndex = {"docs":
[{"location":"history.html#Version-history-1","page":"Version history","title":"Version history","text":"","category":"section"},{"location":"history.html#v0.1.1-1","page":"Version history","title":"v0.1.1","text":"","category":"section"},{"location":"history.html#","page":"Version history","title":"Version history","text":"CHANGED: getindex() changed to get(), since we need a default value to be provided.\nADDED: Selectable abstract type to restrict the usage of constant-time get().","category":"page"},{"location":"history.html#v0.1.0-1","page":"Version history","title":"v0.1.0","text":"","category":"section"},{"location":"history.html#","page":"Version history","title":"Version history","text":"ADDED: more method variations to lift unwrapped values\nCHANGED: unwrap() for Choice renamed to unwrap_choice(), to not confuse it with the constant time unwrap() for Value.","category":"page"},{"location":"history.html#v0.0.1-1","page":"Version history","title":"v0.0.1","text":"","category":"section"},{"location":"history.html#","page":"Version history","title":"Version history","text":"Initial version.","category":"page"},{"location":"index.html#Constant-time-primitives-1","page":"Home","title":"Constant-time primitives","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"This package contains a number of primitives for writing constant-time algorithms.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Warning: at the moment it is not completely certain whether Julia provides constant-time guarantees for the operators the library is based on. It is also not clear if it is a good idea in general to write crypto in Julia. Use this library to prototype branchless algorithms and to control operations on secret data by wrapping it in ConstantTime.Value type.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = ConstantTime","category":"page"},{"location":"index.html#Types-1","page":"Home","title":"Types","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Value\nChoice\nSelectable\nwrap\nunwrap","category":"page"},{"location":"index.html#ConstantTime.Value","page":"Home","title":"ConstantTime.Value","text":"Value{T}(value::T)\nValue(value::T)\n\nA wrapper for a type T that protects it from being used in non-constant-time operations.\n\nThis module defines some methods that are (most probably) constant-time. Namely, for built-in integer types (Int8...128 and UInt8...128), the following methods are defined: zero, one, ~, +, -, xor, &, |, % (with the second argument being a built-in integer type), signed, unsigned, iseven, isodd, iszero, ==. Also, >> and << are defined for the shift also being a built-in integer.\n\nThe functions that would otherwise return Bool will return Choice for Value objects.\n\nBinary operations on one Value and one unwrapped value produce a Value.\n\n\n\n\n\n","category":"type"},{"location":"index.html#ConstantTime.Choice","page":"Home","title":"ConstantTime.Choice","text":"An object representing a result of a constant-time comparison, used in select and swap.\n\nSupports !.\n\nwarning: Warning\nComparison of immutable objects with Value fields bypasses the custom ==, and the result is an unwrapped boolean.\n\n\n\n\n\n","category":"type"},{"location":"index.html#ConstantTime.Selectable","page":"Home","title":"ConstantTime.Selectable","text":"An abstract type to mark types for which select is defined. Usually these will be compound user types containing several Value fields.\n\n\n\n\n\n","category":"type"},{"location":"index.html#ConstantTime.wrap","page":"Home","title":"ConstantTime.wrap","text":"wrap(x)\nwrap(x::Value)\n\nIf x is a Value, returns x, otherwise wraps x in a Value.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ConstantTime.unwrap","page":"Home","title":"ConstantTime.unwrap","text":"unwrap(x)\nunwrap(x::Value)\n\nIf x is a Value, returns the wrapped value. Otherwise, returns x.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Functions-1","page":"Home","title":"Functions","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"select\nswap\ngetindex","category":"page"},{"location":"index.html#ConstantTime.select","page":"Home","title":"ConstantTime.select","text":"select(choice::Bool, x, y)\nselect(choice::Choice, x::Value{T}, y::Value{T})\n\nAn analogue of a ternary operator or ifelse (which, at the moment, cannot have methods added to them).\n\nIf choice is true, returns x, else y. For choice being a Choice object, and x and y being Value objects, the operation is constant-time.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ConstantTime.swap","page":"Home","title":"ConstantTime.swap","text":"swap(choice::Bool, x, y)\nswap(choice::Choice, x::Value{T}, y::Value{T})\n\nIf choice is true, returns (y, x), else (x, y). For choice being a Choice object, and x and y being Value objects, the operation is constant-time.\n\n\n\n\n\n","category":"function"}]
}
